<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--

#{param}  ${param} 区别:
#{param}:是预编译的。用占位符在赋值，preparamstatemnt注入sql参数的，prarm=？，可以防止sql注入
${param} 直接把值赋值在变量上 param=param

${param}使用场景:在sql初始化时就要显示内容时，就要使用.例如;select * from table_name  table_name作为变量就要赋值 或者order by id 的id

-->


<mapper namespace="com.dao.FruitDao">


    <resultMap id="FruitMap" type="com.entity.Fruit" >
        <result column="name" property="name"/>
        <result column="price" property="price"/>
        <result column="createTime" property="createTime"/>
        <!--<result column="updateTime" property="updateTime"/>-->
    </resultMap>

    <sql id="FruitFeild">
       id, name,price,address,createTime
    </sql>

    <!--db：支持主键自增。 设置useGeneratedKeys=true（默认false） keyProperty的值则是db自增的主键绑定到javabean中的对应属性-->
    <insert id="addFruit" parameterType="com.entity.Fruit" useGeneratedKeys="true" keyProperty="id" >
        INSERT into fruit(name,price,address,createTime) VALUES (#{name },#{price},#{address},#{createTime});
    </insert>


    <update id="updateFruit" parameterType="com.entity.Fruit">
        UPDATE fruit
        <set>
            name=#{name},price=#{price},updateTime=#{updateTime}
        </set>
        <where>
            id=#{id};
        </where>
    </update>

    <delete id="deleteFruit" parameterType="int">
        DELETE FROM fruit where id=#{id};
    </delete>

    <!--如果传的是单个值，id=#{变量名可以随意写 id或idsss}-->
    <select id="queryFruit" parameterType="int" resultMap="FruitMap">
        SELECT <include refid="FruitFeild"  />
        from fruit
        WHERE id=#{id};
    </select>

    <!--如果系统传的是多个值，mybatis会自己把参数封装在map对象中。
    取值方式: 1.默认map中的key是 pram1,pram2,pram3....,pramn     Fruit queryFruit(int id,String name);     id=#{param1}
              2.可以在方法上用@Param Fruit queryFruit(@Param("id") int id, @Param("name") String name);          id=#{id}
              3. 直接传Map对象 Fruit queryFruit(Map<String,String> params);                                 id=#{map中的key}

              4.如果是 list arrary set： #{list[i]} #{set[i]}
    -->
<!--    1
    <select id="queryFruitByNameAndId" resultMap="FruitMap">
        SELECT <include refid="FruitFeild"  />
        from fruit
        WHERE id=#{param1} AND name=#{param2};
    </select>-->

    <!--2 ,3-->
<!--    <select id="queryFruitByNameAndId" resultMap="FruitMap">
        SELECT <include refid="FruitFeild"  />
        from fruit
        WHERE id=#{id} AND name=#{name};
    </select>-->

    <!--4-->
    <select id="queryFruitByNameAndId" resultMap="FruitMap">
        SELECT <include refid="FruitFeild"  />
        from fruit
        WHERE id=#{list[0]} AND name=#{list[1]};
    </select>



    <!--include refid 应用sql 标签的内容，使sql复用性更高-->
    <select id="queryFruits"  resultMap="FruitMap">
        SELECT <include refid="FruitFeild"  />
        from fruit;
    </select>


    <!--批量查询

foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。

    forecah:

     item表示集合中每一个元素进行迭代时的别名，
    index指 定一个名字，用于表示在迭代过程中，每次迭代到的位置，
    open表示该语句以什么开始，
    separator表示在每次进行迭代之间以什么符号作为分隔 符，
    close表示以什么结束。

    collection:传入的值


    -->
    <select id="queryFruitsByIds1" resultType="com.entity.Fruit">
        SELECT * from fruit
        WHERE  id in
        <foreach collection="list" item="aas" index="index" open="(" separator="," close=")">
            #{aas}
        </foreach>
    </select>

    <!--如果传入的是map  collection的值则是map中的key-->
    <select id="queryFruitsByIds2" resultType="com.entity.Fruit">
        SELECT * from fruit
        WHERE  id in
        <foreach collection="ids" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="queryFruitsByIds3" resultType="com.entity.Fruit" >
        SELECT * from fruit
        WHERE  id in
        <foreach collection="array" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!--
    trim标记是一个格式化的标记，可以完成set或者是where标记等功能
    prefix:前缀
    prefixOverrides：去掉第一个and或者是or
    suffix：后缀
    suffixOverrides：重写后缀
    -->
    <select id="queryFruitsLike" resultType="com.entity.Fruit" parameterType="com.entity.Fruit" >
        SELECT * FROM fruit
        <trim prefix="where" prefixOverrides="AND|OR" suffix=";" >
            <if test="name != null">
                name LIKE #{name}
            </if>
            <if test="address !=null">
               OR address LIKE #{address}
            </if>
        </trim>
    </select>

</mapper>